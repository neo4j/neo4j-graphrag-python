version: '3'

dotenv: ['.env']

vars:
  GRAPHVIZ_VERSION: 8.1.0
  LOCAL_PREFIX: /home/gonzo/local

tasks:
  install-graphviz:
    desc: Download, build and install Graphviz from source
    cmds:
      - mkdir -p {{.LOCAL_PREFIX}}
      - |
        if [ ! -f "graphviz-{{.GRAPHVIZ_VERSION}}.tar.gz" ]; then
          wget https://gitlab.com/api/v4/projects/4207231/packages/generic/graphviz-releases/{{.GRAPHVIZ_VERSION}}/graphviz-{{.GRAPHVIZ_VERSION}}.tar.gz
        fi
      - tar -xzf graphviz-{{.GRAPHVIZ_VERSION}}.tar.gz
      - cd graphviz-{{.GRAPHVIZ_VERSION}} && ./configure --prefix={{.LOCAL_PREFIX}}
      - cd graphviz-{{.GRAPHVIZ_VERSION}} && make
      - cd graphviz-{{.GRAPHVIZ_VERSION}} && make install

  setup-env:
    desc: Set up environment variables for Graphviz
    cmds:
      - |
        cat > setup_graphviz_env.sh << 'EOF'
        #!/bin/bash
        # Add Graphviz libraries to LD_LIBRARY_PATH
        export LD_LIBRARY_PATH={{.LOCAL_PREFIX}}/lib:$LD_LIBRARY_PATH
        # Add Graphviz binaries to PATH
        export PATH={{.LOCAL_PREFIX}}/bin:$PATH
        EOF
      - chmod +x setup_graphviz_env.sh

  install-build-deps:
    desc: Install necessary build dependencies
    cmds:
      - sudo apt-get update
      - sudo apt-get install -y build-essential python3-dev

  install:
    desc: Install the package and dependencies with poetry
    cmds:
      - poetry install --with dev --extras "all"

  setup-kg:
    desc: Setup the knowledge graph with medical papers
    deps: [install]
    cmds:
      - poetry run python advanced_patterns/setup_knowledge_graph.py
    env:
      NEO4J_URI: '{{.NEO4J_URI}}'
      NEO4J_USERNAME: '{{.NEO4J_USERNAME}}'
      NEO4J_PASSWORD: '{{.NEO4J_PASSWORD}}'
      OPENAI_API_KEY: '{{.OPENAI_API_KEY}}'

  run-example:
    desc: Run the GraphRAG example
    deps: [install]
    cmds:
      - poetry run python advanced_patterns/example.py
    env:
      NEO4J_URI: '{{.NEO4J_URI}}'
      NEO4J_USERNAME: '{{.NEO4J_USERNAME}}'
      NEO4J_PASSWORD: '{{.NEO4J_PASSWORD}}'
      OPENAI_API_KEY: '{{.OPENAI_API_KEY}}'

  clean:
    desc: Clean up generated files
    cmds:
      - rm -rf build/
      - rm -rf dist/
      - rm -rf *.egg-info/
      - find . -type d -name __pycache__ -exec rm -rf {} +
      - find . -type f -name "*.pyc" -delete
      - find . -type f -name "*.pyo" -delete
      - find . -type f -name "*.pyd" -delete

  test:
    desc: Run tests
    deps: [install]
    cmds:
      - poetry run pytest tests/

  lint:
    desc: Run linters
    deps: [install]
    cmds:
      - poetry run black .
      - poetry run isort .
      - poetry run flake8 .

  build:
    desc: Build the package
    deps: [clean]
    cmds:
      - poetry build

  default:
    desc: Show available tasks
    cmds:
      - task --list

  all:
    desc: Run all setup tasks in order
    cmds:
      - task: install-graphviz
      - task: setup-env
      - task: install-build-deps
      - task: install
      - task: test-graphviz
      - task: visualize-graph

  test-graphviz:
    desc: Test Graphviz installation with a simple Python script
    cmds:
      - |
        cat > test_graphviz.py << 'EOF'
        import pygraphviz as pgv
        # Create a new graph
        G = pgv.AGraph()
        # Add some nodes and edges
        G.add_edge(1, 2)
        G.add_edge(2, 3)
        G.add_edge(3, 1)
        # Set the layout
        G.layout(prog='dot')
        # Save the graph as SVG
        G.draw('test.svg')
        print("Graph has been created and saved as test.svg")
        EOF
      - env LD_LIBRARY_PATH={{.LOCAL_PREFIX}}/lib PATH={{.LOCAL_PREFIX}}/bin:$PATH poetry run python test_graphviz.py

  visualize-graph:
    desc: Run the graph visualization script
    deps: [install]
    env:
      LD_LIBRARY_PATH: '{{.LOCAL_PREFIX}}/lib'
      PATH: '{{.LOCAL_PREFIX}}/bin:/usr/bin:{{.PATH}}'
    cmds:
      - poetry run python visualize_graph.py

  clean-visualizations:
    desc: Remove generated visualization files
    cmds:
      - rm -f knowledge_graph*.svg

  run-advanced-examples:
    desc: Run the advanced GraphRAG pattern examples
    deps: [install]
    env:
      LD_LIBRARY_PATH: '{{.LOCAL_PREFIX}}/lib'
      PATH: '{{.LOCAL_PREFIX}}/bin:/usr/bin:{{.PATH}}'
    cmds:
      - poetry run python advanced_patterns/example.py

  clean-logs:
    desc: Remove generated log files
    cmds:
      - rm -f graphrag.log
